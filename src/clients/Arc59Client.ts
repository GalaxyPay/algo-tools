/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  // AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "createApplication()void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "arc59_optRouterIn(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_getOrCreateInbox(address)address": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_sendAsset(axfer,address,uint64)address": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_claim(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_reject(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_getInbox(address)address": {
      call_config: {
        no_op: "CALL",
      },
    },
    "arc59_claimAlgo()void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  bare_call_config: {
    no_op: "NEVER",
    opt_in: "NEVER",
    close_out: "NEVER",
    update_application: "NEVER",
    delete_application: "NEVER",
  },
  schema: {
    local: {
      declared: {},
      reserved: {},
    },
    global: {
      declared: {},
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 0,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  contract: {
    name: "ARC59",
    desc: "",
    methods: [
      {
        name: "createApplication",
        desc: "Deploy ARC59 contract",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "arc59_optRouterIn",
        desc: "Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.",
        args: [
          {
            name: "asa",
            type: "uint64",
            desc: "The ASA to opt into",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "arc59_getOrCreateInbox",
        desc: "Gets the existing inbox for the receiver or creates a new one if it does not exist",
        args: [
          {
            name: "receiver",
            type: "address",
            desc: "The address to get or create the inbox for",
          },
        ],
        returns: {
          type: "address",
          desc: "The inbox address",
        },
      },
      {
        name: "arc59_getSendAssetInfo",
        args: [
          {
            name: "receiver",
            type: "address",
            desc: "The address to send the asset to",
          },
          {
            name: "asset",
            type: "uint64",
            desc: "The asset to send",
          },
        ],
        returns: {
          type: "(uint64,uint64,bool,bool,uint64)",
          desc: "Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset",
        },
      },
      {
        name: "arc59_sendAsset",
        desc: "Send an asset to the receiver",
        args: [
          {
            name: "axfer",
            type: "axfer",
            desc: "The asset transfer to this app",
          },
          {
            name: "receiver",
            type: "address",
            desc: "The address to send the asset to",
          },
          {
            name: "additionalReceiverFunds",
            type: "uint64",
            desc: "The amount of ALGO to send to the receiver/inbox in addition to the MBR",
          },
        ],
        returns: {
          type: "address",
          desc: "The address that the asset was sent to (either the receiver or their inbox)",
        },
      },
      {
        name: "arc59_claim",
        desc: "Claim an ASA from the inbox",
        args: [
          {
            name: "asa",
            type: "uint64",
            desc: "The ASA to claim",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "arc59_reject",
        desc: "Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.",
        args: [
          {
            name: "asa",
            type: "uint64",
            desc: "The ASA to reject",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "arc59_getInbox",
        desc: "Get the inbox address for the given receiver",
        args: [
          {
            name: "receiver",
            type: "address",
            desc: "The receiver to get the inbox for",
          },
        ],
        returns: {
          type: "address",
          desc: "Zero address if the receiver does not yet have an inbox, otherwise the inbox address",
        },
      },
      {
        name: "arc59_claimAlgo",
        desc: "Claim any extra algo from the inbox",
        args: [],
        returns: {
          type: "void",
        },
      },
    ],
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<
  AppClientCallCoreParams,
  "sendParams"
> & {
  sendParams?: Omit<
    SendTransactionParams,
    | "skipSending"
    | "atc"
    | "skipWaiting"
    | "maxRoundsToWaitForConfirmation"
    | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  | "skipWaiting"
  | "maxRoundsToWaitForConfirmation"
  | "populateAppCallResources"
  | "suppressLog"
>;

/**
 * Defines the types of available calls and state of the Arc59 smart contract.
 */
export type Arc59 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication()void" | "createApplication",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "arc59_optRouterIn(uint64)void" | "arc59_optRouterIn",
      {
        argsObj: {
          /**
           * The ASA to opt into
           */
          asa: bigint | number;
        };
        argsTuple: [asa: bigint | number];
        returns: void;
      }
    > &
    Record<
      "arc59_getOrCreateInbox(address)address" | "arc59_getOrCreateInbox",
      {
        argsObj: {
          /**
           * The address to get or create the inbox for
           */
          receiver: string;
        };
        argsTuple: [receiver: string];
        /**
         * The inbox address
         */
        returns: string;
      }
    > &
    Record<
      | "arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)"
      | "arc59_getSendAssetInfo",
      {
        argsObj: {
          /**
           * The address to send the asset to
           */
          receiver: string;
          /**
           * The asset to send
           */
          asset: bigint | number;
        };
        argsTuple: [receiver: string, asset: bigint | number];
        /**
         * Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset
         */
        returns: [bigint, bigint, boolean, boolean, bigint];
      }
    > &
    Record<
      "arc59_sendAsset(axfer,address,uint64)address" | "arc59_sendAsset",
      {
        argsObj: {
          /**
           * The asset transfer to this app
           */
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          /**
           * The address to send the asset to
           */
          receiver: string;
          /**
           * The amount of ALGO to send to the receiver/inbox in addition to the MBR
           */
          additionalReceiverFunds: bigint | number;
        };
        argsTuple: [
          axfer:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          receiver: string,
          additionalReceiverFunds: bigint | number
        ];
        /**
         * The address that the asset was sent to (either the receiver or their inbox)
         */
        returns: string;
      }
    > &
    Record<
      "arc59_claim(uint64)void" | "arc59_claim",
      {
        argsObj: {
          /**
           * The ASA to claim
           */
          asa: bigint | number;
        };
        argsTuple: [asa: bigint | number];
        returns: void;
      }
    > &
    Record<
      "arc59_reject(uint64)void" | "arc59_reject",
      {
        argsObj: {
          /**
           * The ASA to reject
           */
          asa: bigint | number;
        };
        argsTuple: [asa: bigint | number];
        returns: void;
      }
    > &
    Record<
      "arc59_getInbox(address)address" | "arc59_getInbox",
      {
        argsObj: {
          /**
           * The receiver to get the inbox for
           */
          receiver: string;
        };
        argsTuple: [receiver: string];
        /**
         * Zero address if the receiver does not yet have an inbox, otherwise the inbox address
         */
        returns: string;
      }
    > &
    Record<
      "arc59_claimAlgo()void" | "arc59_claimAlgo",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    >;
};
/**
 * Defines the possible abi call signatures
 */
export type Arc59Sig = keyof Arc59["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends Arc59Sig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the Arc59 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends Arc59Sig> =
  Arc59["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the Arc59 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc59Sig> =
  Arc59["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type Arc59CreateCalls = (typeof Arc59CallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type Arc59CreateCallParams =
  | TypedCallParams<"createApplication()void"> & OnCompleteNoOp;
/**
 * Defines arguments required for the deploy method.
 */
export type Arc59DeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: Arc59CreateCalls) => Arc59CreateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class Arc59CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ARC59 smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method: "createApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the arc59_optRouterIn(uint64)void ABI method
   *
   * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59OptRouterIn(
    args: MethodArgs<"arc59_optRouterIn(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_optRouterIn(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.asa],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_getOrCreateInbox(address)address ABI method
   *
   * Gets the existing inbox for the receiver or creates a new one if it does not exist
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59GetOrCreateInbox(
    args: MethodArgs<"arc59_getOrCreateInbox(address)address">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_getOrCreateInbox(address)address" as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59GetSendAssetInfo(
    args: MethodArgs<"arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)" as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver, args.asset],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_sendAsset(axfer,address,uint64)address ABI method
   *
   * Send an asset to the receiver
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59SendAsset(
    args: MethodArgs<"arc59_sendAsset(axfer,address,uint64)address">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_sendAsset(axfer,address,uint64)address" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.axfer, args.receiver, args.additionalReceiverFunds],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_claim(uint64)void ABI method
   *
   * Claim an ASA from the inbox
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59Claim(
    args: MethodArgs<"arc59_claim(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_claim(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.asa],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_reject(uint64)void ABI method
   *
   * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59Reject(
    args: MethodArgs<"arc59_reject(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_reject(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.asa],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_getInbox(address)address ABI method
   *
   * Get the inbox address for the given receiver
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59GetInbox(
    args: MethodArgs<"arc59_getInbox(address)address">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_getInbox(address)address" as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the arc59_claimAlgo()void ABI method
   *
   * Claim any extra algo from the inbox
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc59ClaimAlgo(
    args: MethodArgs<"arc59_claimAlgo()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "arc59_claimAlgo()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
}

/**
 * A client to make calls to the ARC59 smart contract
 */
export class Arc59Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `Arc59Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return {
      ...result,
      return: returnValue,
    } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Arc59["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the ARC59 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: Arc59DeployArgs & AppClientDeployCoreParams = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(Arc59CallFactory.create);
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the ARC59 smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"createApplication()void">,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(
            Arc59CallFactory.create.createApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the ARC59 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the arc59_optRouterIn(uint64)void ABI method.
   *
   * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc59OptRouterIn(
    args: MethodArgs<"arc59_optRouterIn(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59OptRouterIn(args, params));
  }

  /**
   * Calls the arc59_getOrCreateInbox(address)address ABI method.
   *
   * Gets the existing inbox for the receiver or creates a new one if it does not exist
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The inbox address
   */
  public arc59GetOrCreateInbox(
    args: MethodArgs<"arc59_getOrCreateInbox(address)address">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59GetOrCreateInbox(args, params));
  }

  /**
   * Calls the arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset
   */
  public arc59GetSendAssetInfo(
    args: MethodArgs<"arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59GetSendAssetInfo(args, params));
  }

  /**
   * Calls the arc59_sendAsset(axfer,address,uint64)address ABI method.
   *
   * Send an asset to the receiver
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The address that the asset was sent to (either the receiver or their inbox)
   */
  public arc59SendAsset(
    args: MethodArgs<"arc59_sendAsset(axfer,address,uint64)address">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59SendAsset(args, params));
  }

  /**
   * Calls the arc59_claim(uint64)void ABI method.
   *
   * Claim an ASA from the inbox
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc59Claim(
    args: MethodArgs<"arc59_claim(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59Claim(args, params));
  }

  /**
   * Calls the arc59_reject(uint64)void ABI method.
   *
   * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc59Reject(
    args: MethodArgs<"arc59_reject(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59Reject(args, params));
  }

  /**
   * Calls the arc59_getInbox(address)address ABI method.
   *
   * Get the inbox address for the given receiver
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Zero address if the receiver does not yet have an inbox, otherwise the inbox address
   */
  public arc59GetInbox(
    args: MethodArgs<"arc59_getInbox(address)address">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59GetInbox(args, params));
  }

  /**
   * Calls the arc59_claimAlgo()void ABI method.
   *
   * Claim any extra algo from the inbox
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc59ClaimAlgo(
    args: MethodArgs<"arc59_claimAlgo()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(Arc59CallFactory.arc59ClaimAlgo(args, params));
  }

  public compose(): Arc59Composer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      arc59OptRouterIn(
        args: MethodArgs<"arc59_optRouterIn(uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59OptRouterIn(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59GetOrCreateInbox(
        args: MethodArgs<"arc59_getOrCreateInbox(address)address">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59GetOrCreateInbox(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59GetSendAssetInfo(
        args: MethodArgs<"arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59GetSendAssetInfo(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59SendAsset(
        args: MethodArgs<"arc59_sendAsset(axfer,address,uint64)address">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59SendAsset(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59Claim(
        args: MethodArgs<"arc59_claim(uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59Claim(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59Reject(
        args: MethodArgs<"arc59_reject(uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59Reject(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59GetInbox(
        args: MethodArgs<"arc59_getInbox(address)address">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59GetInbox(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      arc59ClaimAlgo(
        args: MethodArgs<"arc59_claimAlgo()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.arc59ClaimAlgo(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      clearState(
        args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender
            )
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options })
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
    } as unknown as Arc59Composer;
  }
}
export type Arc59Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc59_optRouterIn(uint64)void ABI method.
   *
   * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59OptRouterIn(
    args: MethodArgs<"arc59_optRouterIn(uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<
    [...TReturns, MethodReturn<"arc59_optRouterIn(uint64)void">]
  >;

  /**
   * Calls the arc59_getOrCreateInbox(address)address ABI method.
   *
   * Gets the existing inbox for the receiver or creates a new one if it does not exist
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59GetOrCreateInbox(
    args: MethodArgs<"arc59_getOrCreateInbox(address)address">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<
    [...TReturns, MethodReturn<"arc59_getOrCreateInbox(address)address">]
  >;

  /**
   * Calls the arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59GetSendAssetInfo(
    args: MethodArgs<"arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<
    [
      ...TReturns,
      MethodReturn<"arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64)">
    ]
  >;

  /**
   * Calls the arc59_sendAsset(axfer,address,uint64)address ABI method.
   *
   * Send an asset to the receiver
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59SendAsset(
    args: MethodArgs<"arc59_sendAsset(axfer,address,uint64)address">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<
    [...TReturns, MethodReturn<"arc59_sendAsset(axfer,address,uint64)address">]
  >;

  /**
   * Calls the arc59_claim(uint64)void ABI method.
   *
   * Claim an ASA from the inbox
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59Claim(
    args: MethodArgs<"arc59_claim(uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<[...TReturns, MethodReturn<"arc59_claim(uint64)void">]>;

  /**
   * Calls the arc59_reject(uint64)void ABI method.
   *
   * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59Reject(
    args: MethodArgs<"arc59_reject(uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<[...TReturns, MethodReturn<"arc59_reject(uint64)void">]>;

  /**
   * Calls the arc59_getInbox(address)address ABI method.
   *
   * Get the inbox address for the given receiver
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59GetInbox(
    args: MethodArgs<"arc59_getInbox(address)address">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<
    [...TReturns, MethodReturn<"arc59_getInbox(address)address">]
  >;

  /**
   * Calls the arc59_claimAlgo()void ABI method.
   *
   * Claim any extra algo from the inbox
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59ClaimAlgo(
    args: MethodArgs<"arc59_claimAlgo()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<[...TReturns, MethodReturn<"arc59_claimAlgo()void">]>;

  /**
   * Makes a clear_state call to an existing instance of the ARC59 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
  ): Arc59Composer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): Arc59Composer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(
    options?: SimulateOptions
  ): Promise<Arc59ComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(
    sendParams?: AppClientComposeExecuteParams
  ): Promise<Arc59ComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  "txnGroups"
>;
export type Arc59ComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type Arc59ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
